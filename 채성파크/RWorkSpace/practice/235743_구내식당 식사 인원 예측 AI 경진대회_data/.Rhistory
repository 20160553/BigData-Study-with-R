rscodeio::install_theme()
iris
apply(iris[, 1:4], 2, sum)
apply(iris[, 1:4], 2, mean)
install.packages("readxl")
library(readxl)
install.packages("XML")
library(XML
library(XML)
library(XML)
install.packages("jsonlite")
library(jsonlite)
install.packages("psych")
library(psych)
install.packages("descr")
library(descr)
//데이터 전처리
install.packages("deplyr")#데이터 전처리
writeLines('PATH="${RTOOLS40_HOME}\usr\bin;${PATH}"', con = "~/.Renviron")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite")
library(jsonlite)
install.packages("deplyr")#데이터 전처리
library(deplyr)
install.packages("dplyr")#데이터 전처리
library(dplyr)
data("mtcars")
matcars
mtcars
filter(mtcars, cyl 4)
filter(mtcars, cyl, 4)
filter(mtcars, cyl == 4)
filter(mtcars, cyl >= 6 & mpg > 20)
select(mtcars, gear)
select(mtcars, gear, am, cyl)
arrange(mtcars, desc(gear), cyl)
arrange(select(mtcars, gear, cyl), desc(gear), cyl)
arrange(select(mtcars, gear, cyl), desc(gear))
rank(mtcars, mpg)
rank(mpg)
View(mtcars)
View(mtcars)
#지역별 살인사건 발생률에 대한 원인을 분석하기
state.x77
states <- as.data.frame(state.x77[ , c("Murder","Population","Illiteracy","Income","Frost")])
#states.x77 데이터 세트에서모든 행을 포함하되, 열에서는 살인 사건 발생률, 인구, 문맹률, 수입,결빙일만을 추려서 states라는 새로운 변수에 담습니다.
states #열에 포함된 변수가 줄어들었음을 확인할 수 있습니다.
fit = lm(Murder~Population +Illiteracy + Income + Frost , data=states)
# fit 이라는 변수에 다중회귀모형을 담습니다.
plot(fit) # 앞장에서 살펴보았던 방법으로, fit 에 담긴 다중회귀모델이 회귀분석의 기본 가정을 잘 만족하는지 살펴보겠습니다.
# fit 이라는 변수에 다중회귀모형을 담습니다.
plot(fit) # 앞장에서 살펴보았던 방법으로, fit 에 담긴 다중회귀모델이 회귀분석의 기본 가정을 잘 만족하는지 살펴보겠습니다.
library(gvlma) #gvlma 패키지를 실행하고
install.packages("gvlma") #먼저 패키지를 설치합니다.
library(gvlma) #gvlma 패키지를 실행하고
gvmodel<-gvlma(fit) #다중회귀모델을 담아놓은 변수 fit 을 gvlma()함수에 넣어서 만든 결과값을 gvmodel 에 담습니다.
summary(gvmodel) #gvmodel 에 담긴 값을 summary()함수를 이용해서 살펴보면됩니다.
install.packages("car", dependencies = TRUE)
library(car)
vif(fit) #fit 변수에 담아 두었던 다중회귀모델을 그대로 vif()함수에 넣으면 됩니다.
#이상관측치
###### 이상관측치를 찾아주는 car 패키지 안의 influencePlot 함수 #######
influencePlot(fit) # 다중회귀모형을 함수에 그대로 담아주면 됩니다.
##모형의 최종선택##
#두 회귀모형의 성능 비교해보기
fit1 <- lm(Murder~ ., data=states) # Murder~ 뒤의 마침표(.)는 모든 변수를 포함하라는 의미입니다. 이 경우에는 데이터셋에 포함된 4 개의 변수가 모두 담기게 됩니다.
summary(fit1) #fit1 에 담긴 첫 번째 회귀모형에 대한 요약을 볼 수 있습니다.
fit2 <- lm(Murder ~ Population + Illiteracy , data=states) #fit2 에는 4개의 변수 중 임의로 선택한 Population 과 Illiteray 두 개의 변수만을 가지고 회귀모형을 만들어 담습니다.
summary(fit2) #fit2 에 담긴 두 번째 회귀모형에 대한 요약을 볼 수 있습니다.
#AIC (Akaite's an Information Criterion)
AIC(fit1, fit2) #AIC()함수를 이용해서, fit1, fit2 두개의 회귀모형의성능을 비교합니다.
##최적의 회귀모형을 위한 변수의 선택 따라하기##
#① 후진 단계별 회귀 분석 따라 하기
#Backward stepwise regression
full.model = lm(Murder~. , data = states) #결과변수인 Murder~ 뒤에 마침표(.)는 모든 변수를 의미합니다.
reduced.model = step(full.model, direction = "backward") #direction 을"backward"로 정하면 됩니다.
summary(reduced.model) #summary()함수를 이용해서 step()함수가 찾은 최적의 회귀모형을 확인하면 됩니다.
##최적의 회귀모형을 위한 변수의 선택 따라하기##
#① 후진 단계별 회귀 분석 따라 하기
#Backward stepwise regression
full.model = lm(Murder~. , data = states) #결과변수인 Murder~ 뒤에 마침표(.)는 모든 변수를 의미합니다.
reduced.model = step(full.model, direction = "backward") #direction 을"backward"로 정하면 됩니다.
summary(reduced.model) #summary()함수를 이용해서 step()함수가 찾은 최적의 회귀모형을 확인하면 됩니다.
)
#② 전진 단계별 회귀 분석 따라 하기
#Forward stepwise regression
min.model = lm(Murder~1, data = states)
fwd.model <- step(min.model, direction="forward", scope = (Murder~Population+ Illiteracy + Income+ + Frost), trace=0)
summary(fwd.model)
#② 전진 단계별 회귀 분석 따라 하기
#Forward stepwise regression
min.model = lm(Murder~1, data = states)
fwd.model <- step(min.model, direction="forward", scope = (Murder~Population+ Illiteracy + Income+ + Frost), trace=0)
summary(fwd.model)
#모든 부분집합 회귀 분석 따라 하기
# all subset regression
library(leaps)
leaps <- regsubsets(Murder~ Population + Illiteracy + Income + Frost, data= states, nbest=4)
plot(leaps, scale="adjr2")
setwd("C:/Users/multicampus/Desktop/RWorkspace/235743_구내식당 식사 인원 예측 AI 경진대회_data")
train_df <- read.csv("train.csv")
test_df <- read.csv("test.csv")
#데이터 꼬라지 확인
train_df %>% str()
#데이터 꼬라지 확인
train_df %>% str()
library(dplyr)
#데이터 꼬라지 확인
train_df %>% str()
#데이터 꼬라지 확인
train_df %>% str() %>% summary()
train_df %>% summary()
test_df %>% summary()
test_df %>% str()
test_df %>% summary()
train_df %>% summary()
#factor 형변환
train_df$요일 <- as.factor(x=train_df$요일, levels=c("월","화", "수", "목", "금"))
#factor 형변환
train_df$요일 <- as.factor(x=train_df$요일, levels=c("월","화", "수", "목", "금"))
#factor 형변환
train_df$요일 <- factor(x=train_df$요일, levels=c("월","화", "수", "목", "금"))
head(train_df)
head(train_df$요일)
#데이터 꼬라지 확인
train_df %>% str()
#시각화 라이브러리 설치 및 임포트
install.packages("inspectdf")
library(inspectdf)
inspect_cor(train_df) %>% show_plot()
#NA 값 존재하는 지 시각화
inspect_na(train_df) %>% show_plot()
inspect_cor(test_df) %>% show_plot()
inspect_na(test_df) %>% show_plot()
train_df %>% summary()
#히스토그램
inspect_num(train_df) %>% show_plot()
inspect_num(test_df) %>% show_plot()
#히스토그램
inspect_num(train_df) %>% show_plot()
inspect_types(test_df) %>% show_plot()
#변수 타입 시각화
inspect_types(train_df) %>% show_plot()
View(test_df)
View(train_df)
