#데이터 불러오기
train_df <- read.csv("train.csv")
setwd("C:/Users/multicampus/Desktop/RWorkspace/235743_구내식당 식사 인원 예측 AI 경진대회_data")
#데이터 불러오기
train_df <- read.csv("train.csv")
test_df <- read.csv("test.csv")
library(dplyr)
#데이터 꼬라지 확인
train_df %>% str()
train_df %>% summary()
test_df %>% str()
test_df %>% summary()
#factor 형변환
train_df$요일 <- factor(x=train_df$요일, levels=c("월","화", "수", "목", "금"))
test_df$요일 <- factor(x=test_df$요일, levels=c("월","화", "수", "목", "금"))
#시각화 라이브러리 설치 및 임포트
install.packages("inspectdf")
library(inspectdf)
#변수간 상관관계 파악
inspect_cor(train_df) %>% show_plot()
inspect_cor(test_df) %>% show_plot()
#NA 값 존재하는 지 시각화
inspect_na(train_df) %>% show_plot()
inspect_na(test_df) %>% show_plot()
#히스토그램
inspect_num(train_df) %>% show_plot()
inspect_num(test_df) %>% show_plot()
#변수 타입 시각화
inspect_types(train_df) %>% show_plot()
inspect_types(test_df) %>% show_plot()
#히스토그램
inspect_num(train_df) %>% show_plot()
#변수간 상관관계 파악
inspect_cor(train_df) %>% show_plot()
train_df %>% filter(nchar(석식메뉴) < 10 | is.na(석식메뉴)) %>% view
train_df %>% filter(nchar(석식메뉴) < 10 | is.na(석식메뉴)) %>% View
#히스토그램
inspect_num(train_df) %>% show_plot()
train_df %>% select(중식계, 석식계) %>% colMeans()
geom_line(size = 0.5, colour = #112246) + theme_minimal()
ggplot(train_df) + aes(x = 일자, y = 현본사소속재택근무자수) +
ggplot(train_df) + aes(x = 일자, y = 현본사소속재택근무자수) +
geom_line(size = 0.5, color = #112246) + theme_minimal()
ggplot(train_df) + aes(x = 일자, y = 현본사소속재택근무자수) +
geom_line(size = 0.5, color = #112246) + theme_minimal()
ggplot(train_df) + aes(x = 일자, y = 현본사소속재택근무자수) +
geom_line(size = 0.5, color = "#112246") + theme_minimal()
ggplot(train_df) + aes(x = 일자, y = 현본사소속재택근무자수) +
ggplot(train_df) + aes(x = 일자, y = 현본사소속재택근무자수) +
geom_line(size = 0.5, color = "#112246") + theme_minimal()
library(ggplot2)
ggplot(train_df) + aes(x = 일자, y = 현본사소속재택근무자수) +
geom_line(size = 0.5, colour = "#112246") + theme_minimal()
ggplot(train_df) + aes(x = 일자, y = 현본사소속재택근무자수) +
geom_line(size = 0.5, color = "#112246") + theme_minimal()
ggplot(train_df) + aes(x = 일자, y = 현본사소속재택근무자수) +
geom_line(size = 0.5, colour = "#112246") + theme_minimal()
#NA 값 존재하는 지 시각화
inspect_na(train_df) %>% show_plot()
#변수 타입 시각화
inspect_types(train_df) %>% show_plot()
train_df$일자 <- as.Date(train_df$일자)
train_df$일자 <- as.Date(train_df$일자)
test_df$일자 <- as.Date(test_df$일자)
ggplot(train_df) + aes(x = 일자, y = 현본사소속재택근무자수) +
geom_line(size = 0.5, colour = "#112246") + theme_minimal()
train %>%
mutate(corona=factor(ifelse(현본사재택근무자수 > 0, 1, 0))) %>%
group_by(corona, 요일) %>%
summarise(중=mean(중식계), 석=mean(석식계))
train_df %>%
mutate(corona=factor(ifelse(현본사재택근무자수 > 0, 1, 0))) %>%
group_by(corona, 요일) %>%
summarise(중=mean(중식계), 석=mean(석식계))
train_df %>%
mutate(corona=factor(ifelse(현본사소속재택근무자수 > 0, 1, 0))) %>%
group_by(corona, 요일) %>%
summarise(중=mean(중식계), 석=mean(석식계))
ggplot(train_df) + aes(x=일자, y=본사정원수) +
geom_line(size=0.5, color="#112245") + theme_minimal()
##
train_df %>%
mutate(최대가능인원=본사정원수-본사휴가지수-본사출장지수-현본사소속재택근무자수
휴가비율=본사휴가지수/본사정원수,
##
train_df %>%
mutate(최대가능인원=본사정원수 -본사휴가자수 -본사출장자수 -현본사소속재택근무자수
휴가비율=본사휴가지수/본사정원수,
##
train_df %>%
mutate(최대가능인원=본사정원수 -본사휴가자수 -본사출장자수 -현본사소속재택근무자수,
휴가비율=본사휴가지수/본사정원수,
출장비율 = 본사출장자수/본사정원수,
시간외근무명령서승인건수비율=본사시간외근무명령서승인건수/본사정원수,
본사재택근무비율=현본사소속재택근무자수/본사정원수,
중식계비율=중식계/최대가능인원,
석식계비율=석식계/최대가능인원,
점심저녁차이=중식계비율-석식계비율) %>%
select(-c(본사휴가자수,본사출장자수,본사시간외근무명령서승인건수,현본사소속재택근무자수)) -> imsi
##
train_df %>%
mutate(최대가능인원=본사정원수 -본사휴가자수 -본사출장자수 -현본사소속재택근무자수,
휴가비율= 본사휴가자수/본사정원수,
출장비율 = 본사출장자수/본사정원수,
시간외근무명령서승인건수비율=본사시간외근무명령서승인건수/본사정원수,
본사재택근무비율=현본사소속재택근무자수/본사정원수,
중식계비율=중식계/최대가능인원,
석식계비율=석식계/최대가능인원,
점심저녁차이=중식계비율-석식계비율) %>%
select(-c(본사휴가자수,본사출장자수,본사시간외근무명령서승인건수,현본사소속재택근무자수)) -> imsi
imsi
#변수간 상관관계 파악
inspect_cor(train_df) %>% show_plot()
rm(imsi)
##
train_df %>%
mutate(최대가능인원=본사정원수 -본사휴가자수 -본사출장자수 -현본사소속재택근무자수,
휴가비율= 본사휴가자수/본사정원수,
출장비율 = 본사출장자수/본사정원수,
시간외근무명령서승인건수비율=본사시간외근무명령서승인건수/본사정원수,
본사재택근무비율=현본사소속재택근무자수/본사정원수,
중식계비율=중식계/최대가능인원,
석식계비율=석식계/최대가능인원,
점심저녁차이=중식계비율-석식계비율) %>%
select(-c(본사휴가자수,본사출장자수,본사시간외근무명령서승인건수,현본사소속재택근무자수)) -> train_df_nomalization
summarise(train_df_nomalization)
train_df_nomalization
head(train_df_nomalization, -10)
View(train_df_nomalization)
View(train_df_nomalization)
test_df %>%
mutate(최대가능인원=본사정원수 -본사휴가자수 -본사출장자수 -현본사소속재택근무자수,
휴가비율= 본사휴가자수/본사정원수,
출장비율 = 본사출장자수/본사정원수,
시간외근무명령서승인건수비율=본사시간외근무명령서승인건수/본사정원수,
본사재택근무비율=현본사소속재택근무자수/본사정원수,
중식계비율=중식계/최대가능인원,
석식계비율=석식계/최대가능인원,
점심저녁차이=중식계비율-석식계비율) %>%
select(-c(본사휴가자수,본사출장자수,본사시간외근무명령서승인건수,현본사소속재택근무자수)) -> test_df_nomalization
test_df %>% summary()
summary(train_df_nomalization)
summary(test_df)
summary(test_df_nomalization)
test_df %>%
mutate(최대가능인원=본사정원수 -본사휴가자수 -본사출장자수 -현본사소속재택근무자수,
휴가비율= 본사휴가자수/본사정원수,
출장비율 = 본사출장자수/본사정원수,
시간외근무명령서승인건수비율=본사시간외근무명령서승인건수/본사정원수,
본사재택근무비율=현본사소속재택근무자수/본사정원수,
중식계비율=중식계/최대가능인원,
석식계비율=석식계/최대가능인원,
점심저녁차이=중식계비율-석식계비율) %>%
select(-c(본사휴가자수,본사출장자수,본사시간외근무명령서승인건수,현본사소속재택근무자수)) -> test_df_nomalization
summary(test_df_nomalization)
test_df %>% summary()
test_df %>%
mutate(최대가능인원=본사정원수 -본사휴가자수 -본사출장자수 -현본사소속재택근무자수,
휴가비율= 본사휴가자수/본사정원수,
출장비율 = 본사출장자수/본사정원수,
시간외근무명령서승인건수비율=본사시간외근무명령서승인건수/본사정원수,
본사재택근무비율=현본사소속재택근무자수/본사정원수) %>%
select(-c(본사휴가자수,본사출장자수,본사시간외근무명령서승인건수,현본사소속재택근무자수)) -> test_df_nomalization
summary(test_df_nomalization)
summary(train_df_nomalization)
summary(test_df_nomalization)
library(scales)
randomFor_launch <- randomForest::randomForest(석식계~., data=train_df_nomalization)
randomFor_launch <- randomForest::randomForest(석식계+중식계~., data=train_df_nomalization)
randomfor_pre <- predict(randomFor_launch, newdata = test_df_nomalization, type="response")
View(train_df_nomalization)
View(test_df_nomalization)
##
train_df %>%
mutate(최대가능인원=본사정원수 -본사휴가자수 -본사출장자수 -현본사소속재택근무자수,
휴가비율= 본사휴가자수/본사정원수,
출장비율 = 본사출장자수/본사정원수,
시간외근무명령서승인건수비율=본사시간외근무명령서승인건수/본사정원수,
본사재택근무비율=현본사소속재택근무자수/본사정원수
) %>%
select(-c(본사휴가자수,본사출장자수,본사시간외근무명령서승인건수,현본사소속재택근무자수)) -> train_df_nomalization
test_df %>%
mutate(최대가능인원=본사정원수 -본사휴가자수 -본사출장자수 -현본사소속재택근무자수,
휴가비율= 본사휴가자수/본사정원수,
출장비율 = 본사출장자수/본사정원수,
시간외근무명령서승인건수비율=본사시간외근무명령서승인건수/본사정원수,
본사재택근무비율=현본사소속재택근무자수/본사정원수) %>%
select(-c(본사휴가자수,본사출장자수,본사시간외근무명령서승인건수,현본사소속재택근무자수)) -> test_df_nomalization
summary(train_df_nomalization)
summary(test_df_nomalization)
subset(train_df_nomalization, select(-c))
library(scales)
library(scales)
randomFor_launch <- randomForest::randomForest(중식계+석식계~., data=train_df_nomalization)
randomfor_pre <- predict(randomFor_launch, newdata = test_df_nomalization, type="response")
head(randomfor_pre)
summary(randomfor_pre)
randomFor_launch <- randomForest::randomForest(중식계~., data=train_df_nomalization)
randomFor_launch <- randomForest::randomForest(중식계~., data=train_df_nomalization)
randomFor_dinner <- randomForest::randomForest(석식계~., data=train_df_nomalization)
randomfor_predic_launch<- predict(randomFor_launch, newdata = test_df_nomalization, type="response")
randomFor_launch <- randomForest::randomForest(중식계~-c[석식계], data=train_df_nomalization)
randomFor_launch <- randomForest::randomForest(중식계~[-석식계], data=train_df_nomalization)
randomFor_launch <- randomForest::randomForest(중식계~.-석식계, data=train_df_nomalization)
randomFor_dinner <- randomForest::randomForest(석식계~.-중식계, data=train_df_nomalization)
randomfor_predic_launch<- predict(randomFor_launch, newdata = test_df_nomalization, type="response")
randomfor_predic_launch<- predict(randomFor_launch, newdata = test_df_nomalization, type="response")
randomfor_predic_dinner<- predict(randomFor_dinner, newdata = test_df_nomalization, type="response")
randomFor_launch <- randomForest::randomForest(중식계~최대가능인원+휴가비율+출장비율+시간외근무명령서승인건수비율 + 본사재택근무비율
+ 요일 + 일자, data=train_df_nomalization)
randomFor_dinner <- randomForest::randomForest(석식계~최대가능인원+휴가비율+출장비율+시간외근무명령서승인건수비율 + 본사재택근무비율
+ 요일 + 일자, data=train_df_nomalization)
randomfor_predic_launch<- predict(randomFor_launch, newdata = test_df_nomalization, type="response")
randomfor_predic_dinner<- predict(randomFor_dinner, newdata = test_df_nomalization, type="response")
head(randomfor_pre)
summary(randomfor_pre)
predict_result_with_service <- data.frame(일자 = test_df$일자, 중식계 = randomfor_predic_launch, 석식계 = randomfor_predic_dinner)
head(predict_result_with_service)
# # 랜덤포레스트
write.csv(predict_result_with_service, file="predict_meal_count", row.names = FALSE)
# # 랜덤포레스트
write.csv(predict_result_with_service, file="predict_meal_count.csv", row.names = FALSE)
randomForest::importance(randomFor_dinner)
source("~/.active-rstudio-document")
setwd("C:/Users/multicampus/Desktop/RWorkspace/17801_auction_price_data/Auction_master_en")
train <- read.csv("Auction_master_train_en.csv")
head(train, 5)
test <- read.csv("Autcion_master_test_en.csv")
test <- read.csv("Autcion_master_test_en.csv")
test <- read.csv("Auction_master_test_en.csv")
rent_info <- read.csv("Autcion_rent_en.csv")
rent_info <- read.csv("Auction_rent_en_csv")
rent_info <- read.csv("Auction_rent_en.csv")
result <- read.csv("Auction_result_en.csv")
regist <- read.csv("Auction_regist_en.csv")
head(result, 5)
str(test)
str(train)
View(train)
setwd("C:/Users/multicampus/Desktop/RWorkspace/235743_구내식당 식사 인원 예측 AI 경진대회_data")
read.csv("predict_meal_count.csv") %>% head()
# # 랜덤포레스트
write.csv(predict_result_with_service, file="predict_meal_count.csv", encoding = 'UTF-8', row.names = FALSE)
# # 랜덤포레스트
write.csv(predict_result_with_service, file="predict_meal_count.csv", fileEncoding = 'UTF-8', row.names = FALSE)
read.csv("predict_meal_count.csv") %>% head()
#데이터 불러오기
train_df <- read.csv("train.csv")
test_df <- read.csv("test.csv")
library(dplyr)
#데이터 꼬라지 확인
train_df %>% str()
train_df %>% summary()
test_df %>% str()
test_df %>% summary()
#factor 형변환
train_df$요일 <- factor(x=train_df$요일, levels=c("월","화", "수", "목", "금"))
test_df$요일 <- factor(x=test_df$요일, levels=c("월","화", "수", "목", "금"))
train_df$일자 <- as.Date(train_df$일자)
test_df$일자 <- as.Date(test_df$일자)
#시각화 라이브러리 설치 및 임포트
install.packages("inspectdf")
library(inspectdf)
#변수간 상관관계 파악
inspect_cor(train_df) %>% show_plot()
inspect_cor(test_df) %>% show_plot()
#NA 값 존재하는 지 시각화
inspect_na(train_df) %>% show_plot()
inspect_na(test_df) %>% show_plot()
#히스토그램
inspect_num(train_df) %>% show_plot()
inspect_num(test_df) %>% show_plot()
#변수 타입 시각화
inspect_types(train_df) %>% show_plot()
options(repos = c(CRAN = "http://cran.rstudio.com"))
library(dplyr)
library(tidyverse)
library(readr)
library(lubridate)
library(rpart)
library(rstudioapi)
library(scales)
library(randomForest)
library(xgboost)
install.packages("xgboost")
library(xgboost)
options(repos = c(CRAN = "http://cran.rstudio.com"))
library(dplyr)
library(tidyverse)
library(readr)
library(lubridate)
library(rpart)
library(rstudioapi)
library(scales)
library(randomForest)
library(xgboost)
library(rpart)
library(party)
library(tidymodels)
install.packages("tidymodels")
library(tidymodels)
library(randomForestExplainer)
install.packages("randomForestExplainer")
library(randomForestExplainer)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
train <- read.csv(
file = "./dataSet/구내식당 식사 인원 예측_data/train.csv",
encoding = 'UTF-8',
na.strings = c('', ' ', 'NA', NA),
)
train <- read.csv(
file = "./train.csv",
encoding = 'UTF-8',
na.strings = c('', ' ', 'NA', NA),
)
test <- read.csv(
file = "./test.csv",
encoding = 'UTF-8',
na.strings = c('', ' ', 'NA', NA),
)
sub <- read.csv(
file = "./sample_submission.csv",
encoding = 'UTF-8',
na.strings = c('', ' ', 'NA', NA),
)
# 석식계와 중식계 데이터를 예측해보자
# 데이터 합치기
test$석식계 <- NA
test$중식계 <- NA
all <- rbind(train, test)
# 결측값 확인하기
colSums(is.na(all))
# 결측값 별도로 따로 없음
# 필요한 자료들 형변환 하기
all$요일 <- as.factor(all$요일)
scales::percent(nrow(train) / nrow(all)) # "96%"
scales::percent(nrow(test) / nrow(all)) # "4%"
lvs <- c('월', '화', '수', '목', '금')
levels(all$요일) <- lvs
summary(all)
set.seed(2023)
train <- all %>% filter(!is.na(all$중식계) & !is.na(all$석식계))
test <- all %>% filter(is.na(all$중식계) & is.na(all$석식계))
# 랜덤포레스트 모델 생성
str(test)
str(train)
# 중식계 데이터
md_rf.launch <- rand_forest(trees = 300, mode='regression') %>%
set_engine('randomForest') %>%
fit(중식계 ~  요일 + 본사정원수 + 본사휴가자수 + 본사출장자수 + 본사시간외근무명령서승인건수 + 현본사소속재택근무자수, data = train)
predictLaunch <- md_rf.launch %>% predict(
test
)
# 석식계 데이터
md_rf.dinner <- rand_forest(trees = 300, mode='regression') %>%
set_engine('randomForest') %>%
fit(석식계 ~ 요일 + 본사정원수 + 본사휴가자수 + 본사출장자수 + 본사시간외근무명령서승인건수 + 현본사소속재택근무자수, data = train)
predictDinner <- md_rf.dinner %>% predict(test)
temp <- data.frame(
test$일자,
predictLaunch,
predictDinner
)
# temp2 <- data.frame(
#     일자=test$일자,
#     중식계=predictLaunch,
#     석식계=predictDinner
# )
colnames(temp) <- c("일자", "중식계", "석식계")
head(temp)
write.csv(temp, "result.csv", fileEncoding='UTF-8', row.names = FALSE)
check <- read.csv('result.csv')
head(check)
temp2 <- data.frame(
일자=test$일자,
중식계=predictLaunch,
석식계=predictDinner
)
write.csv(temp2, "result2.csv", fileEncoding='UTF-8', row.names = FALSE)
train <- read.csv(
file = "./train.csv",
na.strings = c('', ' ', 'NA', NA),
)
test <- read.csv(
file = "./test.csv",
na.strings = c('', ' ', 'NA', NA),
)
sub <- read.csv(
file = "./sample_submission.csv",
na.strings = c('', ' ', 'NA', NA),
)
# 석식계와 중식계 데이터를 예측해보자
# 데이터 합치기
test$석식계 <- NA
test$중식계 <- NA
all <- rbind(train, test)
# 결측값 확인하기
colSums(is.na(all))
# 결측값 별도로 따로 없음
# 필요한 자료들 형변환 하기
all$요일 <- as.factor(all$요일)
scales::percent(nrow(train) / nrow(all)) # "96%"
scales::percent(nrow(test) / nrow(all)) # "4%"
lvs <- c('월', '화', '수', '목', '금')
levels(all$요일) <- lvs
summary(all)
set.seed(2023)
train <- all %>% filter(!is.na(all$중식계) & !is.na(all$석식계))
test <- all %>% filter(is.na(all$중식계) & is.na(all$석식계))
# 랜덤포레스트 모델 생성
str(test)
str(train)
# 중식계 데이터
md_rf.launch <- rand_forest(trees = 300, mode='regression') %>%
set_engine('randomForest') %>%
fit(중식계 ~  요일 + 본사정원수 + 본사휴가자수 + 본사출장자수 + 본사시간외근무명령서승인건수 + 현본사소속재택근무자수, data = train)
predictLaunch <- md_rf.launch %>% predict(
test
)
# 석식계 데이터
md_rf.dinner <- rand_forest(trees = 300, mode='regression') %>%
set_engine('randomForest') %>%
fit(석식계 ~ 요일 + 본사정원수 + 본사휴가자수 + 본사출장자수 + 본사시간외근무명령서승인건수 + 현본사소속재택근무자수, data = train)
predictDinner <- md_rf.dinner %>% predict(test)
temp <- data.frame(
test$일자,
predictLaunch,
predictDinner
)
temp2 <- data.frame(
일자=test$일자,
중식계=predictLaunch,
석식계=predictDinner
)
# temp2 <- data.frame(
#     일자=test$일자,
#     중식계=predictLaunch,
#     석식계=predictDinner
# )
colnames(temp) <- c("일자", "중식계", "석식계")
head(temp)
write.csv(temp, "result.csv", fileEncoding='UTF-8', row.names = FALSE)
write.csv(temp2, "result2.csv", fileEncoding='UTF-8', row.names = FALSE)
check <- read.csv('result.csv')
head(check)
write.csv(temp, "result.csv", row.names = FALSE)
write.csv(temp, "result.csv", fileEncoding='cp949', row.names = FALSE)
head(temp2)
colnames(temp) <- c("일자", "중식계", "석식계")
write.csv(temp, "result.csv", fileEncoding='cp949', row.names = FALSE)
write.csv(temp, "result.csv", fileEncoding='UTF-8-BOM', row.names = FALSE)
write.csv(temp, "result.csv", encoding='UTF-8-BOM', row.names = FALSE)
write.csv(temp, "result.csv", fileEncoding='UTF-8-bom', row.names = FALSE)
write.csv(temp, "result.csv", fileEncoding='UTF-8', row.names = FALSE)
write.csv(temp, "result.csv", row.names = FALSE)
colnames(temp) <- c("일자", "중식계", "석식계")
write.csv(temp, "result.csv", row.names = FALSE)
colnames(temp) <- c("일자", "중식계", "석식계")
temp$일자 <- as.Date(temp$일자)
write.csv(temp, "result.csv", row.names = FALSE)
write.csv(temp, "result.csv", row.names = FALSE)
setwd("C:/Users/multicampus/Desktop/RWorkspace/spaceship-titanic")
#테스트할 파일 읽기
test <- read.csv("test.csv")
#학습시킬 데이터 읽기
train <- read.csv("train.csv")
#데이터 꼬라지 확인
str(test)
str(train)
#factor로 변환
test$CryoSleep <- as.factor(test$CryoSleep)
train$CryoSleep <- as.factor(train$CryoSleep)
test$VIP <- as.factor(test$VIP)
train$VIP <- as.factor(train$VIP)
train$Transported <- as.factor(train$Transported)
#결측치 확인
sapply(train, FUN = function(x){sum(is.na(x))})
#테스트할 파일 읽기
test <- read.csv("test.csv", na.strings = c("", "na", "NA"))
#학습시킬 데이터 읽기
train <- read.csv("train.csv")
#데이터 꼬라지 확인
str(test)
str(train)
#factor로 변환
test$CryoSleep <- as.factor(test$CryoSleep)
train$CryoSleep <- as.factor(train$CryoSleep)
test$VIP <- as.factor(test$VIP)
train$VIP <- as.factor(train$VIP)
train$Transported <- as.factor(train$Transported)
#결측치 확인
sapply(train, FUN = function(x){sum(is.na(x))})
#학습시킬 데이터 읽기
train <- read.csv("train.csv", na.strings = c("", "na", "NA"))
#테스트할 파일 읽기
test <- read.csv("test.csv", na.strings = c("", "na", "NA"))
#학습시킬 데이터 읽기
train <- read.csv("train.csv", na.strings = c("", "na", "NA"))
#데이터 꼬라지 확인
str(test)
str(train)
#factor로 변환
test$CryoSleep <- as.factor(test$CryoSleep)
train$CryoSleep <- as.factor(train$CryoSleep)
test$VIP <- as.factor(test$VIP)
train$VIP <- as.factor(train$VIP)
train$Transported <- as.factor(train$Transported)
#결측치 확인
sapply(train, FUN = function(x){sum(is.na(x))})
sapply(test, FUN = function(x){sum(is.na(x))})
summary(train)
