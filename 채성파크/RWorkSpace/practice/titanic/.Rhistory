rscodeio::install_theme()
iris
apply(iris[, 1:4], 2, sum)
apply(iris[, 1:4], 2, mean)
install.packages("readxl")
library(readxl)
install.packages("XML")
library(XML
library(XML)
library(XML)
install.packages("jsonlite")
library(jsonlite)
install.packages("psych")
library(psych)
install.packages("descr")
library(descr)
//데이터 전처리
install.packages("deplyr")#데이터 전처리
writeLines('PATH="${RTOOLS40_HOME}\usr\bin;${PATH}"', con = "~/.Renviron")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite")
library(jsonlite)
install.packages("deplyr")#데이터 전처리
library(deplyr)
install.packages("dplyr")#데이터 전처리
library(dplyr)
data("mtcars")
matcars
mtcars
filter(mtcars, cyl 4)
filter(mtcars, cyl, 4)
filter(mtcars, cyl == 4)
filter(mtcars, cyl >= 6 & mpg > 20)
select(mtcars, gear)
select(mtcars, gear, am, cyl)
arrange(mtcars, desc(gear), cyl)
arrange(select(mtcars, gear, cyl), desc(gear), cyl)
arrange(select(mtcars, gear, cyl), desc(gear))
rank(mtcars, mpg)
rank(mpg)
View(mtcars)
View(mtcars)
#지역별 살인사건 발생률에 대한 원인을 분석하기
state.x77
states <- as.data.frame(state.x77[ , c("Murder","Population","Illiteracy","Income","Frost")])
#states.x77 데이터 세트에서모든 행을 포함하되, 열에서는 살인 사건 발생률, 인구, 문맹률, 수입,결빙일만을 추려서 states라는 새로운 변수에 담습니다.
states #열에 포함된 변수가 줄어들었음을 확인할 수 있습니다.
fit = lm(Murder~Population +Illiteracy + Income + Frost , data=states)
# fit 이라는 변수에 다중회귀모형을 담습니다.
plot(fit) # 앞장에서 살펴보았던 방법으로, fit 에 담긴 다중회귀모델이 회귀분석의 기본 가정을 잘 만족하는지 살펴보겠습니다.
# fit 이라는 변수에 다중회귀모형을 담습니다.
plot(fit) # 앞장에서 살펴보았던 방법으로, fit 에 담긴 다중회귀모델이 회귀분석의 기본 가정을 잘 만족하는지 살펴보겠습니다.
library(gvlma) #gvlma 패키지를 실행하고
install.packages("gvlma") #먼저 패키지를 설치합니다.
library(gvlma) #gvlma 패키지를 실행하고
gvmodel<-gvlma(fit) #다중회귀모델을 담아놓은 변수 fit 을 gvlma()함수에 넣어서 만든 결과값을 gvmodel 에 담습니다.
summary(gvmodel) #gvmodel 에 담긴 값을 summary()함수를 이용해서 살펴보면됩니다.
install.packages("car", dependencies = TRUE)
library(car)
vif(fit) #fit 변수에 담아 두었던 다중회귀모델을 그대로 vif()함수에 넣으면 됩니다.
#이상관측치
###### 이상관측치를 찾아주는 car 패키지 안의 influencePlot 함수 #######
influencePlot(fit) # 다중회귀모형을 함수에 그대로 담아주면 됩니다.
##모형의 최종선택##
#두 회귀모형의 성능 비교해보기
fit1 <- lm(Murder~ ., data=states) # Murder~ 뒤의 마침표(.)는 모든 변수를 포함하라는 의미입니다. 이 경우에는 데이터셋에 포함된 4 개의 변수가 모두 담기게 됩니다.
summary(fit1) #fit1 에 담긴 첫 번째 회귀모형에 대한 요약을 볼 수 있습니다.
fit2 <- lm(Murder ~ Population + Illiteracy , data=states) #fit2 에는 4개의 변수 중 임의로 선택한 Population 과 Illiteray 두 개의 변수만을 가지고 회귀모형을 만들어 담습니다.
summary(fit2) #fit2 에 담긴 두 번째 회귀모형에 대한 요약을 볼 수 있습니다.
#AIC (Akaite's an Information Criterion)
AIC(fit1, fit2) #AIC()함수를 이용해서, fit1, fit2 두개의 회귀모형의성능을 비교합니다.
##최적의 회귀모형을 위한 변수의 선택 따라하기##
#① 후진 단계별 회귀 분석 따라 하기
#Backward stepwise regression
full.model = lm(Murder~. , data = states) #결과변수인 Murder~ 뒤에 마침표(.)는 모든 변수를 의미합니다.
reduced.model = step(full.model, direction = "backward") #direction 을"backward"로 정하면 됩니다.
summary(reduced.model) #summary()함수를 이용해서 step()함수가 찾은 최적의 회귀모형을 확인하면 됩니다.
##최적의 회귀모형을 위한 변수의 선택 따라하기##
#① 후진 단계별 회귀 분석 따라 하기
#Backward stepwise regression
full.model = lm(Murder~. , data = states) #결과변수인 Murder~ 뒤에 마침표(.)는 모든 변수를 의미합니다.
reduced.model = step(full.model, direction = "backward") #direction 을"backward"로 정하면 됩니다.
summary(reduced.model) #summary()함수를 이용해서 step()함수가 찾은 최적의 회귀모형을 확인하면 됩니다.
)
#② 전진 단계별 회귀 분석 따라 하기
#Forward stepwise regression
min.model = lm(Murder~1, data = states)
fwd.model <- step(min.model, direction="forward", scope = (Murder~Population+ Illiteracy + Income+ + Frost), trace=0)
summary(fwd.model)
#② 전진 단계별 회귀 분석 따라 하기
#Forward stepwise regression
min.model = lm(Murder~1, data = states)
fwd.model <- step(min.model, direction="forward", scope = (Murder~Population+ Illiteracy + Income+ + Frost), trace=0)
summary(fwd.model)
#모든 부분집합 회귀 분석 따라 하기
# all subset regression
library(leaps)
leaps <- regsubsets(Murder~ Population + Illiteracy + Income + Frost, data= states, nbest=4)
plot(leaps, scale="adjr2")
iris <- data(iris)
str(iris)
iris
View(iris)
rm(iris)
iris <- data("iris")
iris
rm(iris)
datasets::iris
iris_df <- datasets::iris
str(iris_df)
summary(iris_df)
df$species <- as.numeric(factor(df$species), level=c("setosa", "versicolor", "verginica"))
df$species
df$species <- as.numeric(factor(iris_df$species), level=c("setosa", "versicolor", "verginica"))
iris_df$species <- as.numeric(factor(iris_df$species), level=c("setosa", "versicolor", "verginica"))
iris_df$species
iris_df$Species <- as.numeric(factor(iris_df$Species), level=c("setosa", "versicolor", "verginica"))
iris_df$Species
set.seed(123)
idx <- sample(1:nrow(iris_df), 0.8 * nrow(iris_df))
iris_df_train <- df[idx, ]
iris_df_train <- iris_df[idx, ]
idx <- sample(1:nrow(iris_df), 0.8 * nrow(iris_df))
iris_df_train <- iris_df[idx, ]
df_test <- df[-idx, ]
iris_df_test <- iris_df[-idx, ]
head(iris_df_train)
head(iris_df_test)
print(dim(iris_df_test))
print(dim(iris_df_train))
#분꽃 문제는 분류 문제
model <- rpart(Species~., method = "class", data=iris_df_train)
library(dplyr)
library(dplyr)
library(ggplot2)
library(rpart)
table(iris_df)
table(iris_df$Sepal.Length, iris_df$Sepal.Width)
table(iris_df$Sepal.Length)
plot(iris_df_train, type="l")
plot(iris_df_train)
pred <- predict(model, iris_df_test, type="class")
#분꽃 문제는 분류 문제
model <- rpart(Species~., method = "class", data=iris_df_train)
pred <- predict(model, iris_df_test, type="class")
#성능평가 및 시각화
cm <- table(iris_df_test$Species, pred)
print(cm)
acc <- (cm[1,1] + cm[2,2] + cm[3,3])/nrow(iris_df_test)
print(acc)
mosaicplot(table(ifelse(train$Transported=="True", "Survived", "Dead"), train$CryoSleep), main = "", cex=1.2, color=TRUE, ylab="CryoSleep")
par(mfrow=c(1, 1))
mosaicplot(table(ifelse(train$Transported=="True", "Survived", "Dead"), train$CryoSleep), main = "", cex=1.2, color=TRUE, ylab="CryoSleep")
mosaicplot(table(ifelse(train$Transported=="True", "Survived", "Dead"), train$VIP), main = "", cex=1.2, color=TRUE, ylab="VIP")
mosaicplot(table(ifelse(train$Transported=="True", "Survived", "Dead"), train$HomePlanet), main = "", cex=1.2, color=TRUE, ylab="HomePlanet")
mosaicplot(table(ifelse(train$Transported=="True", "Survived", "Dead"), train$Destination), main = "", cex=1.2, color=TRUE, ylab="Destination")
library(caret)
confusionMatrix(data=pred, reference = factor(iris_df_test$Species), mode="prec_recall")
library(dplyr)
library(ggplot2)
library(class)
df <- dataset(Titanic)
df <- datasets::Titanic
str(df)
summary(df)
View(df)
#test파일 불러오기
test_df <- read.csv("test.csv")
setwd("C:/Users/multicampus/Desktop/RWorkspace/titanic")
#test파일 불러오기
test_df <- read.csv("test.csv")
#학습 파일 불러오기
train_df <- read.csv("train.csv")
str(test_df)
str(train_df)
#char -> factor 형 변환
train_df$Sex <- as.factor(train_df$Sex)
train_df$Embarked <- as.factor(train_df$Embarked)
str(test_df)
str(train_df)
#int -> factor 형 변환
train_df$Pclass <- as.factor(train_df$Pclass)
#Survived 생존 여부에 따라 No, Yes로 바꾸고 이를 factor로 변환
train_df$Survived <- as.factor(ifelse(train_df$Survived == 0, train_df$Survived <- "No", train_df$Survived <- "Yes"))
#테스트 할 파일도 형변환
test_df$Sex <- as.factor(test_df$Sex)
test_df$Embarked <- as.factor(test_df$Embarked)
test_df$Pclass <- as.factor(test_df$Pclass)
#결측치 확인
sapply(test_df, FUN = function(x) {sum(is.na(x))})
sapply(train_df, FUN = function(x) {sum(is.na(x))})
summary(test_df)
summary(train_df)
plot(train_df)
library(ggplot2)
library(scales)
table(train_df)
table(train_df$Survived)
table(train_df$Survived~train_df$Sex)
table(train_df$Survived,train_df$Sex)
ggplot2(train_df$Sex)
ggplot(tp)
ggplot(data=tp)
tp <- table(train_df$Survived,train_df$Sex)
ggplot(data=tp)
titanic_fare <- ggplot(titanic.train, aes(x = Fare, y = ..density.. ), main = "", xlab="Fare Distribution") + geom_density(fill="blue", alpha=0.3)
titanic_fare <- ggplot(train_df, aes(x = Fare, y = ..density.. ), main = "", xlab="Fare Distribution") + geom_density(fill="blue", alpha=0.3)
titanic_age <- ggplot(train_df, aes(x = Sex, y = ..density.. ), main = "", xlab="Fare Distribution") + geom_density(fill="blue", alpha=0.3)
titanic_age <- ggplot(train_df, aes(x = Age, y = ..density.. ), main = "", xlab="Fare Distribution") + geom_density(fill="blue", alpha=0.3)
titanic_age <- ggplot(train_df, aes(x = Age, y = ..density.. ), main = "", xlab="Age Distribution") + geom_density(fill="blue", alpha=0.3)
titanic_fare <- ggplot(train_df, aes(x = Fare, y = ..density.. ), main = "", xlab="Fare Distribution") + geom_density(fill="blue", alpha=0.3)
titanic_age <- ggplot(train_df, aes(x = Age, y = ..density.. ), main = "", xlab="Age Distribution") + geom_density(fill="blue", alpha=0.3)
grid::grid.arrange(titanic_fare, titanic_age, nrow = 1, ncol = 2)
grid.arrange(titanic_fare, titanic_age, nrow = 1, ncol = 2)
arrange(titanic_fare, titanic_age, nrow = 1, ncol = 2)
grid.arrange(titanic_fare, titanic_age, nrow = 1, ncol = 2)
grid:: arrange(titanic_fare, titanic_age, nrow = 1, ncol = 2)
grid.arrange(titanic_fare, titanic_age, nrow = 1, ncol = 2)
library(grid)
grid.arrange(titanic_fare, titanic_age, nrow = 1, ncol = 2)
grid.arrange(titanic_fare, titanic_age, nrow = 1, ncol = 2)
titanic_fare <- ggplot(train_df, aes(x = Fare, y = ..density.. ), main = "", xlab="Fare Distribution") + geom_density(fill="blue", alpha=0.3)
titanic_age <- ggplot(train_df, aes(x = Age, y = ..density.. ), main = "", xlab="Age Distribution") + geom_density(fill="blue", alpha=0.3)
titanic_fare
titanic_age
titanic_fare <- ggplot(train_df, aes(x = Fare, y = ..density.. ), main = "", xlab="Fare Distribution") + geom_density(fill="blue", alpha=0.3)
plot(train_df)
summary(train_df)
titanic_fare <- ggplot(train_df, aes(x = Fare, y = ..density.. ), main = "", xlab="Fare Distribution") + geom_density(fill="blue", alpha=0.3)
titanic_fare
titanic_age
titanic_age <- ggplot(train_df, aes(x = Age, y = ..density.. ), main = "", xlab="Age Distribution") + geom_density(fill="blue", alpha=0.3)
titanic_age
titanic_age <- ggplot(train_df, aes(x = Age, y = ..density.. ), main = "", xlab="Age Distribution") + geom_density(fill="blue", alpha=0.3)
titanic_age <- ggplot(train_df, aes(x = Age, y = ..density.. ), main = "", xlab="Age Distribution") + geom_density(fill="blue", alpha=0.3)
titanic_age
summary(train_df)
#결측지 대체, 평균값으로(평균대치법)
test_df$Age <- ifelse(is.na(test_df$Age) == TRUE, mean(test_df$Age, na.rm = TRUE), test_df$Age)
train_df$Age <- ifelse(is.na(train_df$Age) == TRUE, mean(train_df$Age, na.rm = TRUE), train_df$Age)
plot(train_df)
titanic_fare <- ggplot(train_df, aes(x = Fare, y = ..density.. ), main = "", xlab="Fare Distribution") + geom_density(fill="blue", alpha=0.3)
titanic_age <- ggplot(train_df, aes(x = Age, y = ..density.. ), main = "", xlab="Age Distribution") + geom_density(fill="blue", alpha=0.3)
titanic_fare
titanic_age
